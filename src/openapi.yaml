openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ainulya16/Ticketing/1.0.0
info:
  description: Simple Ticketing API
  version: "1.0.0"
  title: Ticketing API
  contact:
    email: ainulyaqinmuntako@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: events
    description: Operations for event
  - name: tickets
    description: Operations for tickets (create new, buy ticket)
  - name: updateTransaction
    description: Operation to update transaction status
paths:
  /event:
    get:
      tags:
        - events
      summary: List of available events
      operationId: getEventList
      description: |
        By passing in the appropriate options, you can search for
        available events
      parameters:
        - in: query
          name: name
          description: pass an optional search string for looking up event name
          required: false
          schema:
            type: string
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: list of available events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventItem'
        '400':
          description: bad input parameter
    post:
      tags:
        - events
      summary: create new event
      operationId: addEvent
      description: Create a new event to the system
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing event already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEventItem'
        description: Event item to add
    delete:
      tags:
        - events
      summary: Delete event
      operationId: deleteEvent
      description: Delete Event by ID
      parameters: 
        - in: path
          name: id
          required: true
          description: Id of Event
          schema:
            type: string
      responses:
        '200':
          description: list of available events
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Event has been deleted"
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 1
        '400':
          description: bad input parameter
        '404':
          description: event not found
          
  /ticket/buy:
    post:
      tags:
        - tickets
      summary: Buy ticket
      operationId: buyTicket
      description: Customer can buy ticket (by selected event), when it succeed, customer receive invoice detail through email or redirect to payment page
      responses:
        '200':
          description: Ticket successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Transaction has been created
                  data:
                    type: object
                    properties:
                      transactionId:
                        type: integer
                        example: 99
                      detail:
                        type: string
                        example: Tiket MotoGP Mandalika
                      amount:
                        type: integer
                        example: 100000
                      
        '400':
          description: 'invalid input or ticket has been sold'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyTicket'
  /transaction/success:
    post:
      tags:
        - updateTransaction
      description: Used for cross API communication to update transaction status depends on payment status from Payment Gateway. Can be use as Callback URL's Payment Gateway API (request body must be adjusted depend on API DOCS of Payment Gateway)
      parameters:
        - in: query
          name: transactionId
          example: XXXX1234XXXX
          schema:
            type: string
      responses:
        '200':
          description: Transaction has been updated
components:
  schemas:
    EventItem:
      type: object
      required:
        - id
        - name
        - quota
        - price
        - eventDate
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: MotoGP Mandalika
        quota:
          type: integer
          example: 10000
        price:
          type: integer
          example: 1000000
        eventDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
    NewEventItem:
      type: object
      required:
        - name
        - quota
        - price
        - eventDate
      properties:
        name:
          type: string
          example: MotoGP Mandalika
        quota:
          type: integer
          example: 10000
        price:
          type: integer
          example: 1000000
        eventDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
    BuyTicket:
      type: object
      required:
        - eventId
        - username
        - email
        - phone
      properties:
        eventId:
          type: integer
          example: 1
        username:
          type: string
          example: John Doe
        email:
          type: string
          example: gmail@johndoe.com
        phone:
          type: string
          example: 62898212322